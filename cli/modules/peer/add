#!/usr/bin/env bash
set -e

. "$AZGCLI_WORKDIR/modules/common"

cli_help_add() {
    echo "
AzureGuard CLI - add a peer

Usage: azg.sh [global options] peer add [options]

Options:
  -u, --username    Username that is used for the peer connection.
  -t, --team        Team to assign the peer to. Needs to match the interface.
  -i, --interface   Interface to create the peer for. Returns an error when the interface does not exist.
  -p, --publicip    Public IPv4 that is used for the client configuration file.

Example;
  ./azg peer add -u tverkuij -t Prodigy -i MyNewInterface -p 206.32.152.78
    "
    exit 1
}

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -u|--username)
            USERNAME="$2"
            shift
            shift
        ;;
        -t|--team)
            TEAM="$2"
            shift
            shift
        ;;
        -i|--interface)
            INTERFACENAME="$2"
            shift
            shift
        ;;
        -p|--publicip)
            IP="$2"
            shift
            shift
        ;;
        *)  cli_log "[ERROR] Invalid argument: $1"
            echo "Error: Invalid argument" 
            shift
            cli_help_add
        ;;
    esac
done

if [ -n "${USERNAME}" ] && [ -n "${TEAM}" ] && [ -n "${INTERFACENAME}" ] && [ -n "${IP}" ]; then
    CLIENT_NAME=${USERNAME}
    WIREGUARD_PUB_NIC=${INTERFACENAME}
    WIREGUARD_CONFIG="${WIREGUARD_PATH}/${WIREGUARD_PUB_NIC}.conf"
    cli_log "[INFO] WireGuard config to add peer to: ${WIREGUARD_CONFIG}"
    
    if [ -f "${WIREGUARD_CONFIG}" ]; then
        WIREGUARD_SERVER_PATH="${WIREGUARD_PATH}/${TEAM}/servers/${WIREGUARD_PUB_NIC}"
        
        if [ -d "${WIREGUARD_SERVER_PATH}" ]; then
            WIREGUARD_CLIENT_PATH="${WIREGUARD_PATH}/${TEAM}/clients/${WIREGUARD_PUB_NIC}"
            WIREGUARD_CLIENT_CONFIG="${WIREGUARD_CLIENT_PATH}/${CLIENT_NAME}-${WIREGUARD_PUB_NIC}.conf"
            
            if [ ! -f "${WIREGUARD_CLIENT_CONFIG}" ]; then
                WIREGUARD_ADD_PEER_CONFIG="${WIREGUARD_PATH}/${WIREGUARD_PUB_NIC}-add-peer.conf"
                [[ ! -d "${WIREGUARD_CLIENT_PATH}" ]] && mkdir -p "${WIREGUARD_CLIENT_PATH}"
                
                if [[ $(grep -c AllowedIPs "${WIREGUARD_CONFIG}") -eq 0 ]]; then
                    cli_log "[INFO] Get server address, no clients yet ..."
                    LASTIP=$(grep Address "${WIREGUARD_CONFIG}" | sed 's/ //g' | awk -F= '$1=="Address"{print $2}' | sed 's/\/[0-9]*$//g')
                else
                    cli_log "[INFO] There are existing clients for this server. Getting next IP based on the existing IPs ..."
                    LASTIP=$(grep AllowedIPs "${WIREGUARD_CONFIG}" | sed 's/ //g' | awk -F= '$1=="AllowedIPs"{print $2}' | sed 's/\/[0-9]*$//g' | sort -n | tail -n 1)
                fi
                
                cli_log "[INFO] Generating client keys ..."
                CLIENT_PRIVKEY=$(wg genkey)
                CLIENT_PUBKEY=$(echo "${CLIENT_PRIVKEY}" | wg pubkey)
                PRESHARED_KEY=$(<"${WIREGUARD_SERVER_PATH}"/preshared_key)
                CLIENT_ADDRESS_V4=$(next_ip "$LASTIP")
                
                cli_log "[INFO] Generating peer config to add to interface config ..."
                echo "# ${CLIENT_NAME} start
[Peer]
PublicKey = ${CLIENT_PUBKEY}
PresharedKey = ${PRESHARED_KEY}
AllowedIPs = ${CLIENT_ADDRESS_V4}/32
# ${CLIENT_NAME} end
                " >> "${WIREGUARD_ADD_PEER_CONFIG}"
                
                cli_log "[INFO] Adding peer config to interface config ..."
                wg addconf "${WIREGUARD_PUB_NIC}" "${WIREGUARD_ADD_PEER_CONFIG}"
                cat "${WIREGUARD_ADD_PEER_CONFIG}" >> "${WIREGUARD_CONFIG}"
                
                cli_log "[INFO] Removing temporary add peer config file ..."
                rm -f "${WIREGUARD_ADD_PEER_CONFIG}"
                
                CLIENT_ALLOWED_IP="0.0.0.0/0"
                CLIENT_DNS="168.63.129.16"
                SERVER_PUBKEY=$(<"${WIREGUARD_SERVER_PATH}"/public_key)
                SERVER_HOST=${IP}
                SERVER_PORT=$(grep ListenPort "${WIREGUARD_CONFIG}" | sed 's/ //g' | awk -F=  '$1=="ListenPort"{print $2}')
                
                cli_log "[INFO] Generating peer profile ..."
                echo "[Interface]
Address = ${CLIENT_ADDRESS_V4}/32
DNS = ${CLIENT_DNS}
PrivateKey = ${CLIENT_PRIVKEY}

[Peer]
PublicKey = ${SERVER_PUBKEY}
PresharedKey = ${PRESHARED_KEY}
Endpoint = ${SERVER_HOST}:${SERVER_PORT}
AllowedIPs = ${CLIENT_ALLOWED_IP}
PersistentKeepalive = 25
                " >> "${WIREGUARD_CLIENT_CONFIG}"
                wg addconf "${WIREGUARD_PUB_NIC}" <(wg-quick strip "${WIREGUARD_PUB_NIC}")
                cli_log "[INFO] Client config --> ${WIREGUARD_CLIENT_CONFIG}"
                echo "Done: Peer created"
            else
                cli_log "[ERROR] Peer config already exists."
                fail "Error: Peer config already exists"
            fi
        else
            cli_log "[ERROR] Interface does not belong to this team."
            fail "Error: Interface does not belong to this team"
        fi
    else
        cli_log "[ERROR] Interface does not exist."
        fail "Error: Interface does not exist"
    fi
else
    cli_log "[ERROR] Missing required arguments."
    fail "Error: Missing required arguments"
    cli_help_add
fi